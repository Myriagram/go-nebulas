// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sync.proto

/*
Package syncpb is a generated protocol buffer package.

It is generated from these files:
	sync.proto

It has these top-level messages:
	Sync
	ChunkHeader
	ChunkHeaders
	ChunkData
*/
package syncpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import corepb "github.com/nebulasio/go-nebulas/core/pb"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Sync struct {
	TailBlockHash []byte `protobuf:"bytes,1,opt,name=tail_block_hash,json=tailBlockHash,proto3" json:"tail_block_hash,omitempty"`
}

func (m *Sync) Reset()                    { *m = Sync{} }
func (m *Sync) String() string            { return proto.CompactTextString(m) }
func (*Sync) ProtoMessage()               {}
func (*Sync) Descriptor() ([]byte, []int) { return fileDescriptorSync, []int{0} }

func (m *Sync) GetTailBlockHash() []byte {
	if m != nil {
		return m.TailBlockHash
	}
	return nil
}

type ChunkHeader struct {
	Headers [][]byte `protobuf:"bytes,1,rep,name=headers" json:"headers,omitempty"`
	Root    []byte   `protobuf:"bytes,2,opt,name=root,proto3" json:"root,omitempty"`
}

func (m *ChunkHeader) Reset()                    { *m = ChunkHeader{} }
func (m *ChunkHeader) String() string            { return proto.CompactTextString(m) }
func (*ChunkHeader) ProtoMessage()               {}
func (*ChunkHeader) Descriptor() ([]byte, []int) { return fileDescriptorSync, []int{1} }

func (m *ChunkHeader) GetHeaders() [][]byte {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *ChunkHeader) GetRoot() []byte {
	if m != nil {
		return m.Root
	}
	return nil
}

type ChunkHeaders struct {
	ChunkHeaders []*ChunkHeader `protobuf:"bytes,1,rep,name=chunkHeaders" json:"chunkHeaders,omitempty"`
	Root         []byte         `protobuf:"bytes,2,opt,name=root,proto3" json:"root,omitempty"`
}

func (m *ChunkHeaders) Reset()                    { *m = ChunkHeaders{} }
func (m *ChunkHeaders) String() string            { return proto.CompactTextString(m) }
func (*ChunkHeaders) ProtoMessage()               {}
func (*ChunkHeaders) Descriptor() ([]byte, []int) { return fileDescriptorSync, []int{2} }

func (m *ChunkHeaders) GetChunkHeaders() []*ChunkHeader {
	if m != nil {
		return m.ChunkHeaders
	}
	return nil
}

func (m *ChunkHeaders) GetRoot() []byte {
	if m != nil {
		return m.Root
	}
	return nil
}

type ChunkData struct {
	Blocks []*corepb.Block `protobuf:"bytes,1,rep,name=blocks" json:"blocks,omitempty"`
	Root   []byte          `protobuf:"bytes,2,opt,name=root,proto3" json:"root,omitempty"`
}

func (m *ChunkData) Reset()                    { *m = ChunkData{} }
func (m *ChunkData) String() string            { return proto.CompactTextString(m) }
func (*ChunkData) ProtoMessage()               {}
func (*ChunkData) Descriptor() ([]byte, []int) { return fileDescriptorSync, []int{3} }

func (m *ChunkData) GetBlocks() []*corepb.Block {
	if m != nil {
		return m.Blocks
	}
	return nil
}

func (m *ChunkData) GetRoot() []byte {
	if m != nil {
		return m.Root
	}
	return nil
}

func init() {
	proto.RegisterType((*Sync)(nil), "syncpb.Sync")
	proto.RegisterType((*ChunkHeader)(nil), "syncpb.ChunkHeader")
	proto.RegisterType((*ChunkHeaders)(nil), "syncpb.ChunkHeaders")
	proto.RegisterType((*ChunkData)(nil), "syncpb.ChunkData")
}

func init() { proto.RegisterFile("sync.proto", fileDescriptorSync) }

var fileDescriptorSync = []byte{
	// 236 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x41, 0x4b, 0x03, 0x31,
	0x10, 0x85, 0x59, 0x2d, 0x2b, 0x4e, 0xb7, 0x08, 0xf1, 0xb2, 0x78, 0x2a, 0x0b, 0x4a, 0x2f, 0x26,
	0x60, 0x0f, 0x1e, 0xbc, 0xa9, 0x48, 0xcf, 0xeb, 0xd1, 0x43, 0x49, 0x62, 0x68, 0x96, 0xae, 0x99,
	0x90, 0x64, 0x0f, 0xfd, 0xf7, 0x92, 0x69, 0x0b, 0x5b, 0xd8, 0xdb, 0x7b, 0x33, 0xf3, 0x3e, 0x78,
	0x03, 0x10, 0x0f, 0x4e, 0x73, 0x1f, 0x30, 0x21, 0x2b, 0xb3, 0xf6, 0xea, 0x61, 0xbd, 0xeb, 0x92,
	0x1d, 0x14, 0xd7, 0xf8, 0x27, 0x9c, 0x51, 0x43, 0x2f, 0x63, 0x87, 0x62, 0x87, 0xcf, 0x27, 0x23,
	0x34, 0x06, 0x23, 0xbc, 0x12, 0xaa, 0x47, 0xbd, 0x3f, 0x86, 0x1b, 0x0e, 0xb3, 0xef, 0x83, 0xd3,
	0xec, 0x09, 0xee, 0x92, 0xec, 0xfa, 0x2d, 0xed, 0xb6, 0x56, 0x46, 0x5b, 0x17, 0xcb, 0x62, 0x55,
	0xb5, 0x8b, 0x3c, 0x7e, 0xcf, 0xd3, 0x8d, 0x8c, 0xb6, 0x79, 0x83, 0xf9, 0x87, 0x1d, 0xdc, 0x7e,
	0x63, 0xe4, 0xaf, 0x09, 0xac, 0x86, 0x1b, 0x4b, 0x2a, 0xd6, 0xc5, 0xf2, 0x7a, 0x55, 0xb5, 0x67,
	0xcb, 0x18, 0xcc, 0x02, 0x62, 0xaa, 0xaf, 0x88, 0x42, 0xba, 0xf9, 0x81, 0x6a, 0x14, 0x8e, 0xec,
	0x15, 0x2a, 0x3d, 0xf2, 0x84, 0x98, 0xbf, 0xdc, 0xf3, 0x63, 0x21, 0x3e, 0xba, 0x6d, 0x2f, 0x0e,
	0x27, 0xe1, 0x5f, 0x70, 0x4b, 0x81, 0x4f, 0x99, 0x24, 0x7b, 0x84, 0x92, 0x9a, 0x9c, 0x99, 0x0b,
	0x9e, 0xcb, 0x7b, 0xc5, 0xa9, 0x49, 0x7b, 0x5a, 0x4e, 0x71, 0x54, 0x49, 0x8f, 0x59, 0xff, 0x07,
	0x00, 0x00, 0xff, 0xff, 0x73, 0x84, 0xc9, 0xac, 0x63, 0x01, 0x00, 0x00,
}
